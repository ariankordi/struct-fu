meta:
  id: nn_mii_charinfo
  application: |
    Mii data format used on the Switch via the nn::mii library,
    also used in Miitomo >= 2.3.0, and potentially used in
    mobile games in Unity (CoreDataConverter.dll path found in Pikmin Bloom).
    Contains no bitfields.
  file-extension:
    - charinfo
    # Unofficial:
    - ufsd
    # Games also use .mii, .bin, .dat (needs verification)
  xref:
    struct_names: |
      nn::mii::CharInfo/nn::mii::detail::CharInfoRaw
  endian: le
  #bit-endian: le  # No bitfields.

seq:
  - id: create_id
    type: create_id  # struct nn::mii::CreateId
    #type: u1
    #repeat: expr
    #repeat-expr: 16
  - id: nickname
    type: str
    size: 22
    encoding: utf-16le
    doc: |
      Contains a null terminator at the end.
      NOTE that in order for this to be valid,
      it CANNOT contain any characters after the first
      null terminator character. (nn::mii::Nickname::IsValid() -> IsContinuityTermination(unsigned short const *, int))
  - id: font_region
    type: u1
    enum: font_region
  - id: favorite_color
    type: u1
    enum: favorite_color
  - id: gender
    type: u1
    enum: gender
  - id: height  # alt: miiHeight
    type: u1
  - id: build   # alt: miiBuild
    type: u1
  - id: type
    type: u1
    enum: type
    doc: |
      Whether the Mii is special or not.
  - id: region_move
    type: u1
    enum: region_move
  - id: faceline_type
    type: u1
  - id: faceline_color
    type: u1
  - id: faceline_wrinkle
    type: u1
  - id: faceline_make
    type: u1
  - id: hair_type
    type: u1
  - id: hair_color
    type: u1
  - id: hair_flip
    type: u1
  - id: eye_type
    type: u1
  - id: eye_color
    type: u1
  - id: eye_scale
    type: u1
  - id: eye_aspect
    type: u1
  - id: eye_rotate
    type: u1
  - id: eye_x
    type: u1
  - id: eye_y
    type: u1
  - id: eyebrow_type
    type: u1
  - id: eyebrow_color
    type: u1
  - id: eyebrow_scale
    type: u1
  - id: eyebrow_aspect
    type: u1
  - id: eyebrow_rotate
    type: u1
  - id: eyebrow_x
    type: u1
  - id: eyebrow_y
    type: u1
    doc: |
      Unlike most other minimum values, eyebrowY begins at 3.
  - id: nose_type
    type: u1
  - id: nose_scale
    type: u1
  - id: nose_y
    type: u1
  - id: mouth_type
    type: u1
    enum: mouth_type
  - id: mouth_color
    type: u1
  - id: mouth_scale
    type: u1
  - id: mouth_aspect
    type: u1
  - id: mouth_y
    type: u1
  - id: beard_color
    type: u1
  - id: beard_type
    type: u1
  - id: mustache_type
    type: u1
  - id: mustache_scale
    type: u1
  - id: mustache_y
    type: u1
  - id: glass_type
    type: u1
  - id: glass_color
    type: u1
  - id: glass_scale
    type: u1
  - id: glass_y
    type: u1
  - id: mole_type  # alt: moleExistence
    type: u1
  - id: mole_scale
    type: u1
  - id: mole_x
    type: u1
  - id: mole_y
    type: u1
  - id: reserved_0
    type: u1
    doc: Always set to 0.

# Mirror fields based on naming
# used in other structures.
instances:
  # nn::mii naming:
  face_color:
    value: faceline_color
  face_type:
    value: faceline_type
  face_tex:
    value: faceline_wrinkle
  beard_scale:
    value: mustache_scale
  beard_y:
    value: mustache_y
  name:
    value: nickname

# Expand CreateID type to add validation.
types:
  create_id:
    seq:
      - id: data
        doc: |
          This is struct nn::mii::CreateId, which contains nn::util::Uuid (UUIDv4)
          generated by: struct nn::util::Uuid __cdecl nn::util::`anonymous namespace'::GenerateUuidVersion4(void)
          NOTE that this cannot just be completely random in order to be valid (see is_valid)
          To make a valid CreateID, set the following: `data[8] &= 0x3f; data[8] |= 0x80;`
          Optionally to be a valid UUIDv4 as well: `data[6] &= & 0x0f; data[6] |= 0x40;`
        type: u1
        repeat: expr
        repeat-expr: 16
    instances:
      is_valid:
        value: |
          (data[8] & 0b11000000) == 0b10000000
        doc: |
          Checks the two leftmost bits of byte 8 ("clock_seq_hi_and_reserved" field in RFC 4122)
          that are verified by nn::mii::CreateId::IsValid().
          If this is false, this Mii will not be valid on a real Switch.

enums:
  region_move:    # CFLiRegionMove
    0: all
    1: jp_only
    2: us_only
    3: eu_only
  font_region:    # CFLFontRegion/FFLFontRegion/nn::mii::FontRegion
    0: jp_us_eu
    1: china
    2: korea
    3: taiwan
  gender:         # CFLGender/FFLGender/nn::mii::Gender
    0: male
    1: female
    2: all
  favorite_color: # CFLFavoriteColor/FFLFavoriteColor/nn::mii::FavoriteColor
    0: red
    1: orange
    2: yellow
    3: yellowgreen
    4: green
    5: blue
    6: skyblue
    7: pink
    8: purple
    9: brown
    10: white
    11: black
  type:           # nn::mii::MiiType
    0: normal
    1: special

  mouth_type:
    0: min
    0: resource_min
    10: anger
    12: sorrow
    19: smile
    35: max
    36: open_mouth
    36: resource_max
    37: resource_count
